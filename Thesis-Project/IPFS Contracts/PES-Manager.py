from pyteal import *
from pyteal_helpers import program

TEAL_PATH = "Thesis-Project/TEAL/"


# The NFT Manager Smart Contract has the following functions:
# 1. Storing the user's reputation using boxes. Boxes are created or verified during opting in.
# 2. Creates instances of PES Schemes

def approval():

    # GLOBAL - App Create
    #Minimum-Balance = 200000 + (28500) * 1  + (50000) * 2 = 328500 = 3,285 * MIN_BALANCE

    # Local - App OptIn
    #Minimum-Balance = 100000 + (28500) * 0 + (50000) * 0 = 100000 = MIN_BALANCE

    # GLOBAL

    global_land_registry_address = Bytes("land_registry_address") # Global Bytes

    global_oracle_app_id = Bytes("oracle_app_id")  # Global Int

    global_fraction_asset_id = Bytes("Fractional_Asset_Id") # Global Int
    
    global_cid = Bytes("cid")  # Global Bytes

    global_success = Bytes("Success")


    # To verify the authenticity of this smart contract, insert the CID in this field an compile it
    cid_contracts = Bytes("QmPQjsqpWyPZoq3v2FCNbQPugX9PZgrTT3CWYhJQyEJqZM")

    # LOCAL

    # OPERATIONS

    op_create_PES_scheme = Bytes("create_NFT_seller")

    op_close_out_NFT_seller = Bytes("close_NFT_seller")

    op_receive_positive_response = Bytes("receive_positive_response")

    op_receive_negative_response = Bytes("receive_negative_response")

    op_delete_NFT_seller = Bytes("delete_NFT_seller")

    op_create_box = Bytes("create_box")

    # SUBROUTINES

    @Subroutine(TealType.uint64)
    def box_minimum_balance(box_name, box_size):
        return Add(Int(2500), Mul(Int(400), Add(box_size, Len(box_name))))

    @Subroutine(TealType.none)
    def defaultTransactionChecks(txnId):
        return Seq([
            Assert(txnId < Global.group_size()),
            Assert(Gtxn[txnId].rekey_to() == Global.zero_address()),
            Assert(Gtxn[txnId].close_remainder_to() == Global.zero_address()),
            Assert(Gtxn[txnId].asset_close_to() == Global.zero_address())
        ])

    hasBox = App.box_get(Gtxn[1].sender())

    # CALLS
    # User opts in creating a box
    # Receives a group transaction with two transactions:
    # The first transaction is a payment transaction which serves to increase the minimal balance required for the box
    # The opt-in transacton that creates the box
    create_box = Seq(
        # Verifies if the group of transactions contains only two transactions
        Assert(Global.group_size() == Int(2)),
        # Verifies default transaction checks
        defaultTransactionChecks(Int(0)),
        defaultTransactionChecks(Int(1)),
        # Verifies if the sender of both transaction is the same
        Assert(Gtxn[0].sender() == Gtxn[1].sender()),
        # Verifies if the first transaction is a Payment
        Assert(Gtxn[0].type_enum() == TxnType.Payment),
        # Verifies if the amount sent is enough to cover the minimum balance
        Assert(Gtxn[0].amount() >= box_minimum_balance(Gtxn[1].sender(), Int(1))),
        # Verifies if the second transaction is an Application Call
        Assert(Gtxn[1].type_enum() == TxnType.ApplicationCall),
        # Obtains hasBox
        hasBox,
        # If box does not exist then creates box
        If(hasBox.hasValue() == Int(0))
        .Then(
        Seq(
            Pop(App.box_create(Gtxn[1].sender(), Int(1))),
            App.box_put(Gtxn[1].sender(), Bytes(b'\x00')),
            ) 
        )
        # If Box exists then Reject
        .Else(Reject()),
        # Approves
        Approve(),
    )

    approval = ScratchVar(TealType.bytes)
    num_ints = ScratchVar(TealType.uint64)
    num_bytes = ScratchVar(TealType.uint64)

    # Create_NFT_Seller
    # Called in the NoOp
    # Receives a group transaction with three transaction that consists of:
    # 1. A Payment Transaction
    # 2. An ApplicationCall Transaction
    create_NFT_seller = Seq(
        # Verifies if the group of transactions contains only two transactions
        Assert(Global.group_size() == Int(2)),
        # Verifies default transaction checks
        defaultTransactionChecks(Int(0)),
        defaultTransactionChecks(Int(1)),
        # Verifies if the sender already has a box
        hasBox,
        # If has no box, then the transaction is rejected
        If(hasBox.hasValue() == Int(0), 
            Seq(
                Reject(),
            )
        ),
        # Verifies if the sender of all transaction is the same
        Assert(Gtxn[0].sender() == Gtxn[1].sender()),
        # Verifies the parameters - Apps
        Assert(Gtxn[1].applications[1] == Int(0)),
        Assert(Gtxn[1].applications[2] == App.globalGet(global_oracle_app_id)),
        # Verifies the parameters - Accounts
        Assert(Gtxn[1].accounts[1] == App.globalGet(global_land_registry_address)),
        # verifies the arguments -
        Assert(Gtxn[1].application_args.length() == Int(2)),
        # Determines Approval Program
        If((Btoi(Gtxn[1].application_args[1])) == Int(1))
        .Then(Seq(
            # Verifies if the payment is equal to the minimum balance to create an NFT_Seller
            Assert(Gtxn[0].amount() >= Int(428000)),
            # Asset Program
            approval.store(Bytes(b'\x08 \t\x00\x01\x02\x04\x08\x03\x06\x05\xa0\x8d\x06&\x07\x05State\x10Number_of_Offers\x0eSeller_Address\x13Fractional_Asset_Id\tOracle_Id\tNFT_Price\x15Land_Registry_Address1\x18"\x12@\x04\x9b1\x19!\x07\x12@\x04~1\x19%\x12@\x04u1\x19#\x12@\x04l1\x19$\x12@\x04\n1\x19"\x12@\x00\x01\x006\x1a\x00\x80\nStart_Sale\x12@\x02\xdf6\x1a\x00\x80\x07Buy_NFT\x12@\x0266\x1a\x00\x80\x19receive_negative_response\x12@\x01\xd06\x1a\x00\x80\x19receive_positive_response\x12@\x01Z6\x1a\x00\x80\nGet_Refund\x12@\x00\xec6\x1a\x00\x80\x0bGive_Refund\x12@\x00n6\x1a\x00\x80\nCreate_Box\x12@\x00\x01\x00(d#\x12D2\x04$\x12D"\x88\x04\x03#\x88\x03\xff3\x00\x003\x01\x00\x12D3\x00\x10#\x12D3\x00\x083\x01\x00!\x04\x88\x04S\x0fD3\x01\x10!\x06\x12D3\x01\x00\xbe5\x085\x074\x08"\x12@\x00\x02"C3\x01\x00!\x04\xb9H3\x01\x00"\x16\xbf))d#\x08g#C(d#\rD1\x00*d\x12D"\x88\x03\xa86\x1c\x01\xbe5\n5\t4\nD(d$\x12@\x00;(d!\x05\x12@\x00-"C6\x1c\x01\xbcH\xb1#\xb2\x102\n\xb2\x006\x1c\x01\xb2\x074\x046\x1c\x01!\x04\x88\x03\xdd\x08\xb2\x08"\xb2\x01\xb3))d#\tg#C"5\x04B\xff\xcf4\t\x17"\rD4\t\x175\x04B\xff\xc1"\x88\x03I1\x00\xbe5\x065\x054\x06D(d$\x12@\x008(d!\x05\x12@\x00*"C1\x00\xbcH\xb1#\xb2\x102\n\xb2\x001\x00\xb2\x074\x041\x00!\x04\x88\x03\x82\x08\xb2\x08"\xb2\x01\xb3))d#\tg#C"5\x04B\xff\xd24\x05\x17"\rD4\x05\x175\x04B\xff\xc4\x88\x03/"\x88\x02\xeb1\x00\'\x04d\x88\x03\x05\x12D*d6\x1c\x01\x12D(!\x05g\xb1%\xb2\x106\x1c\x01\xb2\x14#\xb2\x1260\x00\xb2\x116\x1c\x01\xb2\x15"\xb2\x01\xb6#\xb2\x102\n\xb2\x006\x1c\x01\xb2\x072\n`2\nx\t!\x08\x08\xb2\x08"\xb2\x01\xb3#C\x88\x02\xdb"\x88\x02\x971\x00\'\x04d\x88\x02\xb1\x12D\xb1%\xb2\x106\x1c\x01\xb2\x14#\xb2\x1260\x00\xb2\x116\x1c\x01\xb2\x15"\xb2\x01\xb6#\xb2\x102\n\xb2\x006\x1c\x01\xb2\x07!\x08\xb2\x08"\xb2\x01\xb3($g#C\x88\x02\x972\x04$\x12D3\x00\x10#\x12D3\x00\x072\n\x12D3\x01\x10!\x06\x12D3\x01\x003\x00\x00\x12D"\x88\x022#\x88\x02.2\n+dp\x005\x015\x004\x01D4\x007\x01\x1a\x01\x17\x0fD\'\x05d7\x01\x1a\x01\x17\x0b3\x00\x08\x0eD3\x00\x00\xbe5\x035\x024\x03D3\x00\x004\x02\x173\x00\x08\x08\x16\xbf\xb1%\xb2\x103\x00\x00\xb2\x14+d\xb2\x117\x01\x1a\x01\x17\xb2\x12"\xb2\x01\xb6!\x07\xb2\x102\n\xb2\x00+d\xb2-3\x00\x00\xb2.#\xb2/"\xb2\x01\xb3#C\x88\x01\xf0"\x88\x01\xba#\x88\x01\xb6$\x88\x01\xb23\x00\x10#\x12D3\x01\x10!\x06\x12D3\x02\x10%\x12D3\x00\x00*d\x12D3\x01\x00*d\x12D3\x02\x00*d\x12D3\x00\x08!\x042\x00\x0b\x0fD\xb1#\xb2\x102\n\xb2\x007\x01\x1c\x01\xb2\x07!\x052\x00\x0b\xb2\x08"\xb2\x01\xb6!\x06\xb2\x102\n\xb2\x007\x012\x01\xb2\x18\x80\x0fReceive_Request\xb2\x1a7\x01\x1c\x02\xb2\x1c7\x012\x00\xb22"\xb2\x01\xb3\xb1%\xb2\x102\n\xb2\x143\x02\x11\xb2\x11"\xb2\x01\xb3\xb1!\x05\xb2\x106\x1a\x01\xb2&6\x1a\x02\xb2%6\x1a\x03\x17\xb2#\x81\n6\x1a\x03\x17\x94\xb2"2\n\xb2*2\n\xb2)2\n\xb2+2\x03\xb2,"\xb2\x01\xb33\x02\x11\x88\x01D\x80\x08Asset_Id3\x02\x11g+\xb4<g(#g\'\x056\x1a\x04\x17g\x80\x11Receive_Timestamp2\x07\x81<6\x1a\x05\x17\x0b\x08g#C"\x88\x00\xad1\x00\xbe5\x065\x054\x06D(d$\x12@\x008(d!\x05\x12@\x00*"C1\x00\xbcH\xb1#\xb2\x102\n\xb2\x001\x00\xb2\x074\x041\x00!\x04\x88\x00\xe6\x08\xb2\x08"\xb2\x01\xb3))d#\tg#C"5\x04B\xff\xd24\x05\x17"\rD4\x05\x175\x04B\xff\xc4"C"C\x88\x00\x9d"\x88\x00K*d6\x1c\x01\x12D)d"\x12D#C"\x88\x0091\x1d$\x12D13#\x12D\'\x0462\x01g*6\x1c\x01g\'\x066\x1c\x02g("g\x80\x0eNFT_Manager_Id2\rg)"g+"g#C\x8a\x01\x00\x8b\xff2\x04\x0cD\x8b\xff8 2\x03\x12D\x8b\xff8\t2\x03\x12D\x8b\xff8\x152\x03\x12D\x89\x8a\x01\x01\x80\x05appID\x8b\xff\x16P\x03\x89\x8a\x00\x00+d"\x12(d"\x12\x10D\x89\x8a\x00\x00+d"\x13(d#\x12\x10D\x89\x8a\x00\x00(d#\x13D\x89\x8a\x01\x00\x8b\xffq\x0b5\x0c5\x0b4\x0cD4\x0b\'\x06d\x12D\x89\x8a\x02\x01\x81\xc4\x13\x81\x90\x03\x8b\xff\x8b\xfe\x15\x08\x0b\x08\x89')),
            num_ints.store(Int(8)),
            num_bytes.store(Int(2)),
        ))
        .ElseIf((Btoi(Gtxn[1].application_args[1])) == Int(0))
        .Then(Seq(
            # Verifies if the payment is equal to the minimum balance to create an NFT_Seller
            Assert(Gtxn[0].amount() >= Int(399500)),
            # No Asset Program
            approval.store(Bytes(b'\x08 \x08\x00\x01\x02\x08\x04\x03\x06\xa0\x8d\x06&\x05\x05State\x10Number_of_Offers\x0eSeller_Address\tOracle_Id\x15Land_Registry_Address1\x18"\x12@\x04\x171\x19\x81\x05\x12@\x03\xfa1\x19!\x04\x12@\x03\xf01\x19#\x12@\x03\xe71\x19$\x12@\x03\x861\x19"\x12@\x00\x01\x006\x1a\x00\x80\nStart_Sale\x12@\x02\x876\x1a\x00\x80\x07Buy_NFT\x12@\x0226\x1a\x00\x80\x19receive_negative_response\x12@\x01\xcc6\x1a\x00\x80\x19receive_positive_response\x12@\x01V6\x1a\x00\x80\nGet_Refund\x12@\x00\xe96\x1a\x00\x80\x0bGive_Refund\x12@\x00l6\x1a\x00\x80\nCreate_Box\x12@\x00\x01\x00(d#\x12D2\x04$\x12D"\x88\x03z#\x88\x03v3\x00\x003\x01\x00\x12D3\x00\x10#\x12D3\x00\x083\x01\x00%\x88\x03\xc1\x0fD3\x01\x10!\x06\x12D3\x01\x00\xbe5\x065\x054\x06"\x12@\x00\x02"C3\x01\x00%\xb9H3\x01\x00"\x16\xbf))d#\x08g#C(d#\rD1\x00*d\x12D"\x88\x03!6\x1c\x01\xbe5\x085\x074\x08D(d$\x12@\x00:(d!\x05\x12@\x00,"C6\x1c\x01\xbcH\xb1#\xb2\x102\n\xb2\x006\x1c\x01\xb2\x074\x026\x1c\x01%\x88\x03M\x08\xb2\x08"\xb2\x01\xb3))d#\tg#C"5\x02B\xff\xd04\x07\x17"\rD4\x07\x175\x02B\xff\xc2"\x88\x02\xc31\x00\xbe5\x045\x034\x04D(d$\x12@\x007(d!\x05\x12@\x00)"C1\x00\xbcH\xb1#\xb2\x102\n\xb2\x001\x00\xb2\x074\x021\x00%\x88\x02\xf3\x08\xb2\x08"\xb2\x01\xb3))d#\tg#C"5\x02B\xff\xd34\x03\x17"\rD4\x03\x175\x02B\xff\xc5\x88\x02\xa5"\x88\x02f1\x00+d\x88\x02\x81\x12D*d6\x1c\x01\x12D(!\x05g\xb1!\x04\xb2\x106\x1c\x01\xb2\x14#\xb2\x1260\x00\xb2\x116\x1c\x01\xb2\x15"\xb2\x01\xb6#\xb2\x102\n\xb2\x006\x1c\x01\xb2\x072\n`2\nx\t!\x07\x08\xb2\x08"\xb2\x01\xb3#C\x88\x02Q"\x88\x02\x121\x00+d\x88\x02-\x12D\xb1!\x04\xb2\x106\x1c\x01\xb2\x14#\xb2\x1260\x00\xb2\x116\x1c\x01\xb2\x15"\xb2\x01\xb6#\xb2\x102\n\xb2\x006\x1c\x01\xb2\x07!\x07\xb2\x08"\xb2\x01\xb3($g#C\x88\x02\r2\x04$\x12D3\x00\x10#\x12D3\x00\x072\n\x12D3\x01\x10!\x06\x12D3\x01\x003\x00\x00\x12D"\x88\x01\xad#\x88\x01\xa93\x00\x00\xbe5\x015\x004\x01D3\x00\x004\x00\x173\x00\x08\x08\x16\xbf#C\x88\x01\xbf"\x88\x01\x89#\x88\x01\x85$\x88\x01\x813\x00\x10#\x12D3\x01\x10!\x06\x12D3\x02\x10!\x04\x12D3\x00\x00*d\x12D3\x01\x00*d\x12D3\x02\x00*d\x12D3\x00\x08%2\x00\x0b\x0fD\xb1#\xb2\x102\n\xb2\x007\x01\x1c\x01\xb2\x07!\x052\x00\x0b\xb2\x08"\xb2\x01\xb6!\x06\xb2\x102\n\xb2\x007\x012\x01\xb2\x18\x80\x0fReceive_Request\xb2\x1a7\x01\x1c\x02\xb2\x1c7\x012\x00\xb22"\xb2\x01\xb3\xb1!\x04\xb2\x102\n\xb2\x143\x02\x11\xb2\x11"\xb2\x01\xb33\x02\x11\x88\x01:\x80\x08Asset_Id3\x02\x11g(#g\x80\tNFT_Price6\x1a\x01\x17g\x80\x11Receive_Timestamp2\x07\x81<6\x1a\x02\x17\x0b\x08g#C"\x88\x00\xa81\x00\xbe5\x045\x034\x04D(d$\x12@\x007(d!\x05\x12@\x00)"C1\x00\xbcH\xb1#\xb2\x102\n\xb2\x001\x00\xb2\x074\x021\x00%\x88\x00\xd8\x08\xb2\x08"\xb2\x01\xb3))d#\tg#C"5\x02B\xff\xd34\x03\x17"\rD4\x03\x175\x02B\xff\xc5"C"C\x88\x00\x8f"\x88\x00G*d6\x1c\x01\x12D)d"\x12D#C"\x88\x0051\x1d$\x12D13#\x12D+62\x01g*6\x1c\x01g\'\x046\x1c\x02g("g\x80\x0eNFT_Manager_Id2\rg)"g#C\x8a\x01\x00\x8b\xff2\x04\x0cD\x8b\xff8 2\x03\x12D\x8b\xff8\t2\x03\x12D\x8b\xff8\x152\x03\x12D\x89\x8a\x01\x01\x80\x05appID\x8b\xff\x16P\x03\x89\x8a\x00\x00(d"\x12D\x89\x8a\x00\x00(d#\x12D\x89\x8a\x00\x00(d#\x13D\x89\x8a\x01\x00\x8b\xffq\x0b5\n5\t4\nD4\t\'\x04d\x12D\x89\x8a\x02\x01\x81\xc4\x13\x81\x90\x03\x8b\xff\x8b\xfe\x15\x08\x0b\x08\x89')),
            num_ints.store(Int(7)),
            num_bytes.store(Int(2)),
        ))
        .ElseIf((Btoi(Gtxn[1].application_args[1])) == Int(2))
        .Then(Seq(
            # Verifies if the payment is equal to the minimum balance to create an NFT_Seller
            Assert(Gtxn[0].amount() >= Int(506500)),
            # No Asset Program
            #approval.store(Bytes(b'\x08 \x08\x01\x00\x04\x02\t\x06\x08\xa0\x8d\x06&\x08\x05State\x12Number_of_Payments\x10Number_of_Offers\x07Success\x0eSeller_Address\x05Funds\tOracle_Id\x15Land_Registry_Address1\x18#\x12@\x05\x841\x19\x81\x05\x12@\x05\\1\x19$\x12@\x05S1\x19"\x12@\x05J1\x19%\x12@\x04\xa61\x19#\x12@\x00\x01\x006\x1a\x00\x80\nStart_Sale\x12@\x03\x9c6\x1a\x00\x80\x07Buy_NFT\x12@\x03\x1b6\x1a\x00\x80\x19receive_negative_response\x12@\x02\x9d6\x1a\x00\x80\x19receive_positive_response\x12@\x01\xfb6\x1a\x00\x80\nGet_Refund\x12@\x01K6\x1a\x00\x80\x0bGive_Refund\x12@\x00\x846\x1a\x00\x80\nCreate_Box\x12@\x00\x01\x00(d#\x13(d)d"\x08\x13\x10D\x88\x05!2\x04%\x12D#\x88\x04\xe6"\x88\x04\xe23\x00\x003\x01\x00\x12D3\x00\x10"\x12D3\x00\x083\x01\x00!\x04\x88\x05 \x0fD3\x01\x10!\x05\x12D3\x01\x00\xbe5\n5\t4\n#\x12@\x00\x02#C3\x01\x00!\x04\xb9H3\x01\x00#\x16\x88\x05\x1f3\x01\x00\x80\x01\x00\x88\x05 **d"\x08g"C(d)d"\x08\x12D1\x00\'\x04d\x12D#\x88\x04|6\x1c\x01\xbe5\x0c5\x0b4\x0cD#5\x05#5\x066\x1c\x01\x88\x04\xd95\x044\x04(d\x0c@\x00Y6\x1c\x01(d\x16W\x07\x01\x88\x04\xd8(d)d"\x08\x12@\x0024\x05#\r4\x06"\x12\x11@\x00\x02"C\xb1"\xb2\x102\n\xb2\x006\x1c\x01\xb2\x074\x056\x1c\x01!\x04\x88\x04w4\x06\x0b\x08\xb2\x08#\xb2\x01\xb3B\xff\xda6\x1c\x01\xbcH"5\x06**d"\tgB\xff\xbd+d(d4\x04\t"\tS#\x12@\x00\t4\x04"\x085\x04B\xff\x874\x056\x1c\x01\x88\x04K\x085\x05B\xff\xe9#\x88\x03\xd81\x00\xbe5\x085\x074\x08D#5\x05#5\x061\x00\x88\x0475\x044\x04(d\x0c@\x00U1\x00(d\x16W\x07\x01\x88\x047(d)d"\x08\x12@\x0004\x05#\r4\x06"\x12\x11@\x00\x02"C\xb1"\xb2\x102\n\xb2\x001\x00\xb2\x074\x051\x00!\x04\x88\x03\xd84\x06\x0b\x08\xb2\x08#\xb2\x01\xb3B\xff\xdc1\x00\xbcH"5\x06**d"\tgB\xff\xc0+d(d4\x04\t"\tS#\x12@\x00\t4\x04"\x085\x04B\xff\x8b4\x051\x00\x88\x03\xae\x085\x05B\xff\xea\x88\x03n#\x88\x0381\x00\'\x06d\x88\x03R\x12D\'\x04d6\x1c\x01\x12D++d(d"\t"Tg((d"\x08g(d)d"\x08\x12@\x00\x18\xb1"\xb2\x102\n\xb2\x006\x1c\x01\xb2\x07\'\x05d\xb2\x08#\xb2\x01\xb3"C\xb1$\xb2\x106\x1c\x01\xb2\x14"\xb2\x1260\x00\xb2\x116\x1c\x01\xb2\x15#\xb2\x01\xb6"\xb2\x102\n\xb2\x006\x1c\x01\xb2\x07\'\x05d!\x07\x08\xb2\x08#\xb2\x01\xb3B\xff\xc9\x88\x02\xee#\x88\x02\xb81\x00\'\x06d\x88\x02\xd2\x12D++d(d#Tg((d"\x08g(d)d"\x08\x12@\x00\x02"C\xb1$\xb2\x106\x1c\x01\xb2\x14"\xb2\x1260\x00\xb2\x116\x1c\x01\xb2\x15#\xb2\x01\xb6"\xb2\x102\n\xb2\x006\x1c\x01\xb2\x07!\x07\xb2\x08#\xb2\x01\xb3B\xff\xcd\x88\x02\x922\x04%\x12D3\x00\x10"\x12D3\x00\x072\n\x12D3\x01\x10!\x05\x12D3\x01\x003\x00\x00\x12D#\x88\x02;"\x88\x0273\x00\x00\xbe5\x035\x024\x03D3\x00\x00\x88\x02\x9a#\x12D3\x00\x08)d(d\t"\x08\n5\x003\x00\x004\x00\x16\x88\x02\x8c\'\x05\'\x05d4\x00\x08g(d\x165\x013\x00\x004\x01W\x07\x01\x88\x02}"C(d#\x12D#\x88\x01\xe9"\x88\x01\xe5%\x88\x01\xe13\x00\x10"\x12D3\x01\x10!\x05\x12D3\x02\x10$\x12D3\x00\x00\'\x04d\x12D3\x01\x00\'\x04d\x12D3\x02\x00\'\x04d\x12D3\x00\x08!\x062\x00\x0b\x0fD\x81\x0c7\x01\x1a\x02\x17\x18#\x12D\xb1"\xb2\x102\n\xb2\x007\x01\x1c\x01\xb2\x07\x81\x032\x00\x0b\xb2\x08#\xb2\x01\xb6!\x05\xb2\x102\n\xb2\x007\x012\x01\xb2\x18\x80\x0fReceive_Request\xb2\x1a7\x01\x1c\x02\xb2\x1c7\x012\x00\xb22#\xb2\x01\xb3\xb1$\xb2\x102\n\xb2\x143\x02\x11\xb2\x11#\xb2\x01\xb33\x02\x11\x88\x01\x81\x80\x08Asset_Id3\x02\x11g)6\x1a\x02\x17g("g\x80\tNFT_Price6\x1a\x01\x17g\x80\x0fStart_Timestamp2\x07g"C#\x88\x00\xff1\x00\xbe5\x085\x074\x08D#5\x05#5\x061\x00\x88\x01^5\x044\x04(d\x0c@\x00U1\x00(d\x16W\x07\x01\x88\x01^(d)d"\x08\x12@\x0004\x05#\r4\x06"\x12\x11@\x00\x02"C\xb1"\xb2\x102\n\xb2\x001\x00\xb2\x074\x051\x00!\x04\x88\x00\xff4\x06\x0b\x08\xb2\x08#\xb2\x01\xb3B\xff\xdc1\x00\xbcH"5\x06**d"\tgB\xff\xc0+d(d4\x04\t"\tS#\x12@\x00\t4\x04"\x085\x04B\xff\x8b4\x051\x00\x88\x00\xd5\x085\x05B\xff\xea#C#C(d#\x12(d)d"\x08\x12\x11D#\x88\x00Q\'\x04d6\x1c\x01\x12D*d#\x12D"C#\x88\x00>1\x1d%\x12D13"\x12D\'\x0662\x01g\'\x046\x1c\x01g\'\x076\x1c\x02g(#g\x80\x0eNFT_Manager_Id2\rg*#g\'\x05#g+#g"C\x8a\x01\x00\x8b\xff2\x04\x0cD\x8b\xff8 2\x03\x12D\x8b\xff8\t2\x03\x12D\x8b\xff8\x152\x03\x12D\x89\x8a\x01\x01\x80\x05appID\x8b\xff\x16P\x03\x89\x8a\x00\x00(d"\x0fD(d)d\x0eD\x89\x8a\x01\x00\x8b\xffq\x0b5\x0e5\r4\x0eD4\r\'\x07d\x12D\x89\x8a\x02\x01\x81\xc4\x13\x81\x90\x03\x8b\xff\x8b\xfe\x15\x08\x0b\x08\x89\x8a\x01\x01\x8b\xff#!\x06\xba\x17\x89\x8a\x01\x01\x8b\xff!\x06"\xba\x17\x89\x8a\x02\x00\x8b\xfe#\x8b\xff\xbb\x89\x8a\x02\x00\x8b\xfe!\x06\x8b\xff\xbb\x89')),
            approval.store(Bytes(b'\x08 \x08\x01\x00\x04\x02\t\x06\x08\xa0\x8d\x06&\x08\x05State\x12Number_of_Payments\x10Number_of_Offers\x0eSeller_Address\x07Success\x05Funds\tOracle_Id\x15Land_Registry_Address1\x18#\x12@\x05x1\x19\x81\x05\x12@\x05Q1\x19$\x12@\x05H1\x19"\x12@\x05?1\x19%\x12@\x04\x9a1\x19#\x12@\x00\x01\x006\x1a\x00\x80\nStart_Sale\x12@\x03\x936\x1a\x00\x80\x07Buy_NFT\x12@\x03\x126\x1a\x00\x80\x19receive_negative_response\x12@\x02\x9c6\x1a\x00\x80\x19receive_positive_response\x12@\x01\xf96\x1a\x00\x80\nGet_Refund\x12@\x01H6\x1a\x00\x80\x0bGive_Refund\x12@\x00\x846\x1a\x00\x80\nCreate_Box\x12@\x00\x01\x00(d#\x13(d)d"\x08\x13\x10D\x88\x05\x162\x04%\x12D#\x88\x04\xdb"\x88\x04\xd73\x00\x003\x01\x00\x12D3\x00\x10"\x12D3\x00\x083\x01\x00!\x04\x88\x05\x15\x0fD3\x01\x10!\x05\x12D3\x01\x00\xbe5\n5\t4\n#\x12@\x00\x02#C3\x01\x00!\x04\xb9H3\x01\x00#\x16\x88\x05\x143\x01\x00\x80\x01\x00\x88\x05\x15**d"\x08g"C(d)d"\x08\x12D1\x00+d\x12D#\x88\x04r6\x1c\x01\xbe5\x0c5\x0b4\x0cD#5\x05#5\x066\x1c\x01\x88\x04\xcf5\x044\x04(d\x0c@\x00Y6\x1c\x01(d\x16W\x07\x01\x88\x04\xce(d)d"\x08\x12@\x0024\x05#\r4\x06"\x12\x11@\x00\x02"C\xb1"\xb2\x102\n\xb2\x006\x1c\x01\xb2\x074\x056\x1c\x01!\x04\x88\x04m4\x06\x0b\x08\xb2\x08#\xb2\x01\xb3B\xff\xda6\x1c\x01\xbcH"5\x06**d"\tgB\xff\xbd\'\x04d4\x04"\tS#\x12@\x00\t4\x04"\x085\x04B\xff\x894\x056\x1c\x01\x88\x04C\x085\x05B\xff\xe9#\x88\x03\xd01\x00\xbe5\x085\x074\x08D#5\x05#5\x061\x00\x88\x04/5\x044\x04(d\x0c@\x00U1\x00(d\x16W\x07\x01\x88\x04/(d)d"\x08\x12@\x0004\x05#\r4\x06"\x12\x11@\x00\x02"C\xb1"\xb2\x102\n\xb2\x001\x00\xb2\x074\x051\x00!\x04\x88\x03\xd04\x06\x0b\x08\xb2\x08#\xb2\x01\xb3B\xff\xdc1\x00\xbcH"5\x06**d"\tgB\xff\xc0\'\x04d(d4\x04\t"\tS#\x12@\x00\t4\x04"\x085\x04B\xff\x8a4\x051\x00\x88\x03\xa5\x085\x05B\xff\xea\x88\x03e#\x88\x03/1\x00\'\x06d\x88\x03I\x12D+d6\x1c\x01\x12D\'\x04\'\x04d(d"\t"Tg((d"\x08g(d)d"\x08\x12@\x00\x18\xb1"\xb2\x102\n\xb2\x006\x1c\x01\xb2\x07\'\x05d\xb2\x08#\xb2\x01\xb3"C\xb1$\xb2\x106\x1c\x01\xb2\x14"\xb2\x1260\x00\xb2\x116\x1c\x01\xb2\x15#\xb2\x01\xb6"\xb2\x102\n\xb2\x006\x1c\x01\xb2\x07\'\x05d!\x07\x08\xb2\x08#\xb2\x01\xb3B\xff\xc9\x88\x02\xe4#\x88\x02\xae1\x00\'\x06d\x88\x02\xc8\x12D((d"\x08g(d)d"\x08\x12@\x00\x02"C\xb1$\xb2\x106\x1c\x01\xb2\x14"\xb2\x1260\x00\xb2\x116\x1c\x01\xb2\x15#\xb2\x01\xb6"\xb2\x102\n\xb2\x006\x1c\x01\xb2\x07!\x07\xb2\x08#\xb2\x01\xb3B\xff\xcd\x88\x02\x902\x04%\x12D3\x00\x10"\x12D3\x00\x072\n\x12D3\x01\x10!\x05\x12D3\x01\x003\x00\x00\x12D#\x88\x029"\x88\x0253\x00\x00\xbe5\x035\x024\x03D3\x00\x00\x88\x02\x98#\x12D3\x00\x08)d(d\t"\x08\n5\x003\x00\x004\x00\x16\x88\x02\x8a\'\x05\'\x05d4\x00\x08g(d\x165\x013\x00\x004\x01W\x07\x01\x88\x02{"C(d#\x12D#\x88\x01\xe7"\x88\x01\xe3%\x88\x01\xdf3\x00\x10"\x12D3\x01\x10!\x05\x12D3\x02\x10$\x12D3\x00\x00+d\x12D3\x01\x00+d\x12D3\x02\x00+d\x12D3\x00\x08!\x062\x00\x0b\x0fD\x81\x0c7\x01\x1a\x02\x17\x18#\x12D\xb1"\xb2\x102\n\xb2\x007\x01\x1c\x01\xb2\x07\x81\x032\x00\x0b\xb2\x08#\xb2\x01\xb6!\x05\xb2\x102\n\xb2\x007\x012\x01\xb2\x18\x80\x0fReceive_Request\xb2\x1a7\x01\x1c\x02\xb2\x1c7\x012\x00\xb22#\xb2\x01\xb3\xb1$\xb2\x102\n\xb2\x143\x02\x11\xb2\x11#\xb2\x01\xb33\x02\x11\x88\x01\x82\x80\x08Asset_Id3\x02\x11g)6\x1a\x02\x17g("g\x80\tNFT_Price6\x1a\x01\x17g\x80\x0fStart_Timestamp2\x07g"C#\x88\x01\x001\x00\xbe5\x085\x074\x08D#5\x05#5\x061\x00\x88\x01_5\x044\x04(d\x0c@\x00U1\x00(d\x16W\x07\x01\x88\x01_(d)d"\x08\x12@\x0004\x05#\r4\x06"\x12\x11@\x00\x02"C\xb1"\xb2\x102\n\xb2\x001\x00\xb2\x074\x051\x00!\x04\x88\x01\x004\x06\x0b\x08\xb2\x08#\xb2\x01\xb3B\xff\xdc1\x00\xbcH"5\x06**d"\tgB\xff\xc0\'\x04d(d4\x04\t"\tS#\x12@\x00\t4\x04"\x085\x04B\xff\x8a4\x051\x00\x88\x00\xd5\x085\x05B\xff\xea#C#C(d#\x12(d)d"\x08\x12\x11D#\x88\x00Q+d6\x1c\x01\x12D*d#\x12D"C#\x88\x00?1\x1d%\x12D13"\x12D\'\x0662\x01g+6\x1c\x01g\'\x076\x1c\x02g(#g\x80\x0eNFT_Manager_Id2\rg*#g\'\x05#g\'\x04#\x16g"C\x8a\x01\x00\x8b\xff2\x04\x0cD\x8b\xff8 2\x03\x12D\x8b\xff8\t2\x03\x12D\x8b\xff8\x152\x03\x12D\x89\x8a\x01\x01\x80\x05appID\x8b\xff\x16P\x03\x89\x8a\x00\x00(d"\x0fD(d)d\x0eD\x89\x8a\x01\x00\x8b\xffq\x0b5\x0e5\r4\x0eD4\r\'\x07d\x12D\x89\x8a\x02\x01\x81\xc4\x13\x81\x90\x03\x8b\xff\x8b\xfe\x15\x08\x0b\x08\x89\x8a\x01\x01\x8b\xff#!\x06\xba\x17\x89\x8a\x01\x01\x8b\xff!\x06"\xba\x17\x89\x8a\x02\x00\x8b\xfe#\x8b\xff\xbb\x89\x8a\x02\x00\x8b\xfe!\x06\x8b\xff\xbb\x89')),
            #num_ints.store(Int(10)),
            num_ints.store(Int(9)),
            num_bytes.store(Int(3)),
        )).
        Else(
            Reject(),
        ),
        # Starts building
        InnerTxnBuilder.Begin(),
        # Creates an NFT Seller Contract
        InnerTxnBuilder.SetFields(
            {
                # ApplicationCreate transactions are ApplicationCall
                TxnField.type_enum: TxnType.ApplicationCall,
                # ApplicationCreate transactions have on_completion as NoOp
                TxnField.on_completion: OnComplete.NoOp,
                # ApplicationCreate has application ID = 0
                TxnField.application_id: Gtxn[1].applications[1],
                # The Approval Program
                TxnField.approval_program: approval.load(),
                # The Clear Program
                TxnField.clear_state_program: Bytes(b'\x08\x81\x01C'),
                # Local Schema
                TxnField.local_num_byte_slices: Int(0),
                TxnField.local_num_uints: Int(0),
                # Global Schema
                TxnField.global_num_byte_slices: num_bytes.load(),
                TxnField.global_num_uints: num_ints.load(),
                # Sender
                TxnField.sender: Global.current_application_address(),
                # Fee
                TxnField.fee: Int(0),
                # Accounts
                TxnField.accounts: [Gtxn[1].sender(), Gtxn[1].accounts[1]],
                # Apps
                TxnField.applications:[Gtxn[1].applications[2]],
            }
        ),   
        # Submits
        InnerTxnBuilder.Submit(),
        # Approves
        Approve(),
    )

    # Called by the init
    # Receives one address
    # 1. Oracle Address
    # Receives one app id
    # 1. Oracle App Id
    start_nft_manager = Seq(
        # Does default transaction checks
        defaultTransactionChecks(Int(0)),
        # Verifies if the length of accounts array
        Assert(Txn.accounts.length() == Int(1)),
        # Verifies the length of the apps array
        Assert(Txn.applications.length() == Int(1)),
        # Stores the arguments received in both accounts and apps arrays
        App.globalPut(global_land_registry_address, Txn.accounts[1]),
        App.globalPut(global_oracle_app_id, Txn.applications[1]),
        App.globalPut(global_cid, cid_contracts),
        # Approves
        Approve(),
    )

    box_int_neg = ScratchVar(TealType.uint64)

    receive_negative_response = Seq(
        # Does default transaction checks
        defaultTransactionChecks(Int(0)),
        # Verifies if the message was sent by the oracle
        Assert(Global.caller_app_id() == App.globalGet(global_oracle_app_id)),
        # Verifies the length of accounts array
        Assert(Txn.accounts.length() == Int(1)),
        # Obtains the value contained in the box for that user
        boxstr := App.box_get(Txn.accounts[1]),
        # Verifies if it exists
        Assert(boxstr.hasValue()),
        # Stores the int in the var
        box_int_neg.store(Btoi(boxstr.value())),
        # Verifies if the reputation can be decreased
        If(box_int_neg.load() > Int(0))
        .Then(
            Seq(
                box_int_neg.store(box_int_neg.load() - Int(1)),
                App.box_put(Txn.accounts[1], Substring(Itob(box_int_neg.load()), Int(7), Int(8)))
            )
        ),
        #If(BytesGt(boxstr.value(), Bytes(b'\x00')),
        # Lowers reputation
        #App.box_put(Txn.accounts[1], BytesMinus(boxstr.value(), Bytes(b'\x01')))
        #),
        # Approves
        Approve(),
    )

    receive_positive_response = Seq(
        # Does default transaction checks
        defaultTransactionChecks(Int(0)),
        # Verifies if the message was sent by the oracle
        Assert(Global.caller_app_id() == App.globalGet(global_oracle_app_id)),
        # Verifies the length of accounts array
        Assert(Txn.accounts.length() == Int(1)),
        # Obtains the value contained in the box for that user
        boxstr := App.box_get(Txn.accounts[1]),
        # Verifies if it exists
        Assert(boxstr.hasValue()),
        # Verifies if the reputation can be raised
        If(BytesLt(boxstr.value(), Bytes(b'\x64')),
        # Raises reputation
        App.box_put(Txn.accounts[1], BytesAdd(boxstr.value(), Bytes(b'\x01')))
        ),
        # Approves
        Approve(),
    )

    return_value = ScratchVar(TealType.uint64)

    delete_NFT_seller = Seq(
        # Does default transaction checks
        defaultTransactionChecks(Int(0)),
        # Verifies the type of PES Scheme
        isAsset := App.globalGetEx(Txn.applications[1], global_fraction_asset_id),
        # Verifies if the type is PERIODIC
        isPeriodic := App.globalGetEx(Txn.applications[1], global_success),
        # Changes return value with the type
        If(isAsset.hasValue())
        .Then(
            Seq(
                return_value.store(Int(428000)),
            )
        )
        .ElseIf(isPeriodic.hasValue())
        .Then(
            Seq(
                return_value.store(Int(506500)),
            )
        )
        .Else( Seq(
                return_value.store(Int(399500)),
            )
        ),
        # Continues to the next Transaction
        InnerTxnBuilder.Begin(),
        # Continues with an ApplicationCall to the Oracle to opt in
        InnerTxnBuilder.SetFields(
            {
                TxnField.type_enum: TxnType.ApplicationCall,
                TxnField.sender: Global.current_application_address(),
                TxnField.on_completion: OnComplete.DeleteApplication,
                TxnField.accounts: [Txn.accounts[0]],
                TxnField.application_id: Txn.applications[1],
                TxnField.applications: [Txn.applications[2]],
                TxnField.fee: Int(0),
            }
        ),
        # Next InnerTxn
        InnerTxnBuilder.Next(),
        # Returns the MBR
        InnerTxnBuilder.SetFields(
            {
            TxnField.type_enum: TxnType.Payment,
            TxnField.sender: Global.current_application_address(),
            TxnField.receiver: Txn.accounts[0],
            TxnField.amount: return_value.load(),
            TxnField.fee: Int(0),
            }
        ),
        # Submits the Inner Transactions
        InnerTxnBuilder.Submit(),
        # Approves
        Approve(),
    )

    return program.event(
        init=start_nft_manager,
        opt_in=Reject(),
        no_op=Cond(
            [Txn.application_args[0] == op_create_PES_scheme, create_NFT_seller],
            [Txn.application_args[0] == op_receive_negative_response, receive_negative_response],
            [Txn.application_args[0] == op_receive_positive_response, receive_positive_response],
            [Txn.application_args[0] == op_delete_NFT_seller, delete_NFT_seller],
            [Txn.application_args[0] == op_create_box, create_box],
        ),
        delete=Approve(),
        update=Reject(),
    )


def clear():
    return Approve()


def approval_program():
    program = approval()
    # Mode.Application specifies that this is a smart contract
    return compileTeal(program, Mode.Application, version=8)


def clear_state_program():
    program = clear()
    # Mode.Application specifies that this is a smart contract
    return compileTeal(program, Mode.Application, version=8)


if __name__ == "__main__":
    approval_file = open(TEAL_PATH + 'NFT-Manager-approval.teal', 'w')
    approval_file.write(approval_program())
    approval_file.close()

    clear_file = open(TEAL_PATH + 'NFT-Manager-clear.teal', 'w')
    clear_file.write(clear_state_program())
    clear_file.close()

    print("success")
